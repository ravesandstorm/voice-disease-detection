------------------------------------------------------------------------------------------------------------------------------------------
90cnn.keras

from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Input, Dropout, BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

es = EarlyStopping(patience=20, restore_best_weights=True, start_from_epoch=30, monitor='val_acc')
lr = ReduceLROnPlateau(patience=4, factor=0.25)
optA = Adam(learning_rate=0.001)
model = Sequential([
    Input(image_size),
    Conv2D(filters=32, kernel_size=5, activation='relu'),
    Dropout(0.2),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.3),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.4),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.4),
    MaxPooling2D(2, padding='same'),

    Flatten(),
    Dense(units=64, activation='relu'),
    Dropout(0.2),
    Dense(units=3, activation='softmax'),
])
model.compile(optimizer=optA, loss='sparse_categorical_crossentropy', metrics=['acc'])
model.summary()

------------------------------------------------------------------------------------------------------------------------------------------

91cnn.keras
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Input, Dropout, BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

es = EarlyStopping(patience=10, restore_best_weights=True, start_from_epoch=30, monitor='val_acc')
lr = ReduceLROnPlateau(patience=4, factor=0.25)
optA = Adam(learning_rate=0.001)
model = Sequential([
    Input(image_size),
    Conv2D(filters=32, kernel_size=5, activation='relu'),
    Dropout(0.2),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.3),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.4),
    MaxPooling2D(2, padding='same'),
    # Conv2D(filters=32, kernel_size=3, activation='relu'),
    # Dropout(0.4),
    # MaxPooling2D(2, padding='same'),

    Flatten(),
    Dense(units=64, activation='relu'),
    Dropout(0.2),
    Dense(units=3, activation='softmax'),
])
model.compile(optimizer=optA, loss='sparse_categorical_crossentropy', metrics=['acc'])
model.summary()

------------------------------------------------------------------------------------------------------------------------------------------

92cnn.keras
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Input, Dropout, BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

es = EarlyStopping(patience=10, restore_best_weights=True, start_from_epoch=30, monitor='val_acc')
# lr = ReduceLROnPlateau(patience=4, factor=0.25)
# optA = Adam(learning_rate=0.001)
model = Sequential([
    Input(image_size),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.2),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.3),
    MaxPooling2D(2, padding='same'),
    Conv2D(filters=32, kernel_size=3, activation='relu'),
    Dropout(0.4),
    MaxPooling2D(2, padding='same'),
    # Conv2D(filters=32, kernel_size=3, activation='relu'),
    # Dropout(0.4),
    # MaxPooling2D(2, padding='same'),

    Flatten(),
    Dense(units=64, activation='relu'),
    Dropout(0.2),
    Dense(units=3, activation='softmax'),
])
model.compile(optimizer='adam',#optA, 
              loss='sparse_categorical_crossentropy', metrics=['acc'])
model.summary()